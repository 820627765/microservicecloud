1，微服务面临的问题之一，每个微服务的需要配置
微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能
运行，所以一套集中式的、动态的配置管理设施是必不可少的。SpringCloud 提供了 ConfigServer 来解决这个问题，我们每一个微服务自己带着一个
application.yml,上百个配置文件那就尴尬了。

2，ConfigServer 是什么？
SpringCloud Config 未微服务架构中的微服务提供 “集中化的外部配置支持”，配置服务器为“各个不同微服务应用”的所有环境提供了一个“中心化的外部配置”。

3，SpringCloud Config 怎么使用？
- SpringCloud Config 分为 服务端 和 客户端 两部分。
- 服务端 也称为“分布式配置中心”，他是一个“独立的微服务应用”，用来连接配置服务器 并 为客户端提供获取配置信息，加密/解密等访问接口。
- 客户端 则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。配置服务器默认采用
  git 来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。

4，springCloud config 能干什么？
- 集中管理配置文件
- 不同环境不同配置，动态化的配置更新，分环境部署比如 dev/test/prod/beta/release
- 运行期间动态调整配置，不需要再每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息。
- 当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置。
- 将配置信息以 REST 接口的形式暴露

5，与GitHub 整合配置
SpringCloud Config 默认使用Git来存储配置文件。

6，搭建 Config Server 服务（服务端）
    1）用自己的GitHub 账号在GitHub上新建一个名为 microservicecloud-config 的新 Repository
    2）将新建的 microservicecloud-config 资源库clone 到本地
    3）在本地资源库 新建 application.yml，内容如下 并push 到github上。
        spring:
            profiles:
                active:
                - dev
        ---
        spring:
            profiles: dev   #开发环境
            application:
                name: microservicecloud-config-atguigu-dev
        ---
        spring:
            profiles: dev #测试环境
            application:
                name: microservicecloud-config-atguigu-test

    4）新建配置中心模块 microservicecloud-config-3344
    5）配置maven 依赖
        <!-- springCloud Config -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-server</artifactId>
        </dependency>
        <!-- 避免Config的Git插件报错：org/eclipse/jgit/api/TransportConfigCallback -->
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit</artifactId>
            <version>4.10.0.201712302008-r</version>
        </dependency>
        ... 其他依赖参看案例
    6）配置 application.yml
        server:
          port: 3344

        spring:
          application:
            name: microservicecloud-config
          cloud:
            config:
              server:
                git:
                  uri: https://github.com/820627765/microservicecloud-config.git  # 配置github上面的git仓库地址

    7）新建主启动类，并增加启用 SpringCloud Config 的注解 @EnableConfigServer
    8）windows 增加hosts 映射配置  127.0.0.1 config-3344.com
    9）测试通过Config 微服务是否可以从 github 上获取到配置内容
        1）启动微服务 3344
        2）配置读取规则
           http://configServer的Ip:port/{application}-{profile}.yml
           http://configServer的Ip:port/{application}/{profile}[/{label}].yml
           http://configServer的Ip:port/{label}/{application}-{profile}.yml

        3）测试通过配置读取规则编写获取github上不同环境配置信息的请求
         http://config-3344.com:3344/application-dev.yml
         http://config-3344.com:3344/application-test.yml
         http://config-3344.com:3344/application-xxx.yml
         通过application.环境标识.yml 来获取github上不同的配置。如果访问不存在的环境标识 会

    如此，测试通过后，说明服务端已经搭建成功了。

7，搭建 Config Client 客户端项目模块
    1）在本地资源库 microservicecloud-config 中新建 micriservicecloud-config-client.yml 配置文件，内容如下：
        spring:
            profiles:
                active:
                - dev
        ---
        spring:
            profiles: dev   #开发环境
            application:
                name: microservicecloud-config-client
        eureka:
          client:
            service-url:
              defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/
        server:
        	port: 8201
        ---
        spring:
            profiles: test #测试环境
            application:
                name: microservicecloud-config-client
        eureka:
          client:
            service-url:
              defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/
        server:
        	port: 8202
    2）提交到github中
    3）新建客户端模块 microservicecloud-config-cient-3355
    4）配置maven 依赖
        <!-- SpringCloud Config客户端 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        ...其他依赖参看案例
    5）配置 bootstrap.yml，内容如下
        spring:
          cloud:
            config:
              name: microservicecloud-config-client # 需要从github上读取的资源名称（配置文件的文件名），注意没有yml 后缀
              profile: dev #本次访问的配置项
              label: master # 本次访问的git 分支，当前表示主分支
              uri: http://localhost:3344 # 本微服务启动后，先去找 3344 这个服务，通过 3344 这个Config Server 去github上获取配置信息

       解释一下：
       application.yml 是用户级的资源配置项。
       bootstrap.yml 是系统级的，优先级更加高。
       SpringCloud 会创建一个 “Bootstrap Context”，作为Spring应用的 “application Context”的父上下文。初始化的时候，
       Bootstrap Context 负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的 Environment 。
       BootStrap 属性有高优先级，默认情况下，他们不会被本地配置覆盖。‘BootStrap Context’ 和 ‘Applicaton Context’有着不同的约定。
       所以：新增了一个 bootstrap.yml 文件，保证‘Bootstrap Context’ 和 ‘Applicaton Context’配置的分离。

    5）编写控制器测试，客户端启动时，可以经过配置中心去github 上读取对应环境的配置信息
        @RestController
        public class ConfigClientController {
            @Value("${spring.application.name}")
            private String applicationName;

            @Value("${eureka.client.service-url.defaultZone}")
            private String eurekaServers;

            @Value("${server.port}")
            private String port;

            @RequestMapping("/config")
            public String getConfig()
            {
                String str = "applicationName: " + applicationName + "\t eurekaServers:" + eurekaServers + "\t port: " + port;
                System.out.println("******str: " + str);
                return "applicationName: " + applicationName + "\t eurekaServers:" + eurekaServers + "\t port: " + port;
            }
        }
    6）编写主启动类，此时并没有加入其他特殊启用注解。然后启动。
    6）测试，访问 http://localhost:环境的端口/config  ，客户端输出对应环境的内容则表示测试成功



