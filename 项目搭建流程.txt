1，新建父亲项目 microservicecloud、配置依赖管理
2，新建api模块 microservicecloud-api -> 配置依赖 -> 新建Dept 实体类。
3，新建部门服务的提供者模块 microservicecloud-provider-dept-8001 -> 配置依赖(需要有springMVC、MyBatis 功能) -> 配置application.yml -> 编写controller、dao、service层代码。-> 启动应用并测试访问
4，新建部门服务的消费者模块 microservicecloud-consumer-dept-80(能调用服务提供者的微服务) -> 配置依赖(需要有springMVC的功能，能访问部门服务) -> 配置application.yml -> 编写代码（RestTemplate 远程服务调用）-> 启动应用并测试访问
5，新建所有服务的注册中心模块 microservicecloud-eureka-7001 -> 配置依赖(eureka 的依赖) -> 配置application.yml -> 编码（著启动类启用 Eureka）-> 启动应用并测试访问
   Eureka 是什么？
   -- Netflix 中文名：网“菲”公司。
   -- Eureka 被涉及遵循 AP 原则。
   -- Eureka 是Netflix公司的一个子模块，也是核心之一，是一个基于REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。
   服务发现与注册对于微服务架构来说非常重要，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用
   的配置文件（记录了某个服务的协议://ip:port/资源地址 的配置文件）了。就是我们常所的 ”服务注册中心“。
   -- 重点总结
      -- 服务注册中心。服务都需要注册到”这个服务注册中心“，才能被其他服务找到。
      -- 通过服务标识符（服务名称）就能访问到服务。
      -- 消费者端服务需要先经过访问 Eureka 才能真正访问到目标服务提供者。

   springboot 如果要开启一个新技术（组件），一般有两步：
    1）新增该组件的maven依赖
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka-server</artifactId>
        </dependency>
    2）通过注解启用该组件服务（一般在主启动类上加上启动注解）
        @EnableEurekaServer //开启Eureka 的服务组件

6，将部门服务提供者 和 部门服务消费者 都添加配置将服务注册到注册中心
    1）添加依赖，表示该项目是 Eureka 的一个客户端
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId> //这里就没有-server 了。
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
    2）配置当前项目是 Eureka 的客户端
        eureka:
          client:   #eureka 的客户端配置
            service-url:
              defaultZone: http://localhost:7001/eureka   # 指定eureka 的注册地址
    3）主启动类，启用我是 eureka 的客户端
        @EnableEurekaClient   //启用我是Eureka 的客户端，当应用启动时，会根据配置发送心跳给 Eureka 服务端（注册进Eureka注册中心）

    4）从两个启用注解，可以知道 Eureka 是一个CS 结构
        @EnableEurekaServer
        @EnableEurekaClient
    5）通过访问Eureka 页面 http://localhost:7001/ 查看Application 模块，查看服务是否已经成功注册了
       异常情况：
        1）Eureka 页面有一段红色提示：
          EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN
          THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
          这并不是报错也不是异常，而是Eureka 的自我保护机制。
          - 什么是Eureka 的自我保护机制呢？
          “好死不如赖活着”，这是一种应对网络异常的安全保护措施，即宁可同时保留所有微服务，也不盲目注销任何健康的服务。
          也就是某个微服务不可用了，比如网络不通，没有发送心跳到eureka（一般是90秒） 或 真的挂了，
          eureka 就会“想”这个服务死否真的死了，如果真的死了，eureka 是要将该服务下线的。
          但是当 开启 “自我保护模式”后 eureka 不会将其清理（即注销该服务），依旧会对该微服务的信息进行保存，当网络故障恢复后，该Eureka Server
          节点会自动退出自我保护模式。
          这个保护机制可以使得 Eureka 集群更加健壮和稳定。
          在springcloud 中，可以通过 eureka.server.enable-self-preservation = false 来禁用自我保护机制 ，单不推荐关闭。
          - 这个红色提示是怎么产生的呢？
          当Eureka 发现有服务出现波动时（如某个服务挂了，一时间没有心跳了等），机会进入自我保护机制，现象就是那段红色内容。

    6）注册微服务信息完善 与 actuator（主管监控和配置）
        - 我们希望在注册中心的 application 信息里的status 能自定义
        - 我们希望鼠标悬浮在status 上时，浏览器左下角能看见的是 ip信息。
        - 我们希望点击注册中心 application 的服务连接，希望能看见一些服务的信息，而不是 Error Page
        怎么修改上面两个需要呢？
            前两个只需要在服务端 application.xml 加上如下配置：
                eureka:
                  client:   #eureka 的客户端配置
                    service-url:
                      defaultZone: http://localhost:7001/eureka   # 指定eureka 的注册地址
                  instance:
                    instance-id: microservicecloud-dept8001  # 指定该微服务注册到 eureka 后 status 显示的信息，叫实例id。默认是“ip:应用名:端口号”
                    prefer-ip-address: true                  # 指定在eureka 的页面的 status 字段，鼠标悬浮可以显示服务端的ip 地址
            服务信息需要操作如下：
                1）加入一个依赖
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-actuator</artifactId>
                </dependency>
                2）在父工程pom.xml 中加入构建配置
                <build>
                    <finalName>microservicecloud</finalName> //父工程的名字
                    <resources>
                        <resource>
                            // 表示允许访问所有工程模块里的 src/main/resources 目录下的内容
                            <directory>src/main/resources</directory>
                            // true 表示开启过滤
                            <filtering>true</filtering>
                        </resource>
                    </resources>
                    <plugins>
                        <plugin>
                            // 这个插件就是负责解析和解读上面 配置的 resources 文件夹里的内容的
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-resources-plugin</artifactId>
                            <configuration>
                                <delimiters>
                                    // 表示能够读取 以$开头 和 $结尾的配置文件的信息，并将内容用对应的信息代替
                                    <delimit>$</delimit>
                                </delimiters>
                            </configuration>
                        </plugin>
                    </plugins>
                </build>
                3）修改 application.yml 加入 项目的 info 信息配置。当从eureka 点击连接的时候，访问的 info 地址就能拿到这个信息了
                    info:
                      app.name: microservicecloud
                      company.name: www.example.com
                      build.artifactId: $project.artifactId$  # 经过解析后，会使用项目的 project.artifactId 作为值
                      vuild.version: $project.version$  # 经过解析后，会使用项目的 project.version$ 作为值
                4）访问info 信息得到的结果如，这样其他人一看就能知道一些服务信息了，而不是 Error page
                    {"app":{"name":"microservicecloud"},
                        "company":{"name":"www.example.com"},
                        "build":{"artifactId":"$project.artifactId$"},
                        "vuild":{"version":"$project.version$"}}

7）什么是服务发现呢？
    前面经过我们配置，已经将服务注册进Eureka 中了。那么什么是服务发现呢？
    -- 可以通过服务发现功能得到注册进eureka 里面的微服务信息。
    -- 怎么实现服务发现呢？
        1）主启动类开启服务发现的能力 @EnableDiscoveryClient
           在需要查询eureka中注册的服务列表的微服务的主启动类上加上该启用注解。
        2）编写代码查询eureka 中的微服务列表和具体服务实例的信息
           @Autowired
           private DiscoveryClient discoveryClient; //该对象是spring提供的，用于去eureka中查询微服务
           //其实所谓服务发现，就是可以通过一个访问路径，将信息展示出来
           @RequestMapping(value = "/dept/discovery", method = RequestMethod.GET)
           public Object discovery(){
           	    //通过 discoveryClient 去 eureka 查看有哪些微服务，返回微服务列表
           		List<String> list = discoveryClient.getServices();
           		System.out.println("**********" + list);

           		// 通过 discoveryClient 的getInstances 方法 通过服务名称查询 是这个服务名称的 微服务实例列表（一个服务的集群）。
           		List<ServiceInstance> srvList = discoveryClient.getInstances("MICROSERVICECLOUD-DEPT");
           		for (ServiceInstance element : srvList) {
           			//通过微服务实例访问微服务的Id，服务的主机，服务的端口号，服务的uri 等信息
           			System.out.println(element.getServiceId() + "\t" + element.getHost() + "\t" + element.getPort() + "\t"
           					+ element.getUri());
           		}
           		return this.discoveryClient;
           }
        3）测试，访问服务发现请求

8，eureka 的集群配置（注册中心高可用）
    1）新建模块 microservicecloud-eureka-7002，microservicecloud-eureka-7003
    2）配置依赖
    3）给本机设置host 域名，如果不设置这个通过端口号来区分，测试过有问题，等后面有时间再分析原因。
        127.0.0.1 eureka7001.com
        127.0.0.1 eureka7002.com
        127.0.0.1 eureka7003.com
    4）配置各自的 application.yml （修改域名（修改host文件，也可以不修改哈）的区分和映射）
        server:
          port: 7001

        eureka:
          instance:
            hostname: eureka7001.com  # eureka 服务端实例的名称，这里配置域名。
          client:
            register-with-eureka: false # false 表示不向注册中心注册自己
            fetch-registry: false # false 表示自己就就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
            service-url:
              #集群环境需要配置其他 eureka 的服务端的访问地址，多个用逗号分隔。注意集群环境是配其他的eureka 的地址，自己的不需要配置了
              defaultZone : http://localhost:7002/eureka/,http://localhost:7003/eureka/  # 设置与 erureka server 交互的地址，查询服务和注册服务都要依赖这个地址。就是对外暴露的eureka 的服务地址
    5）修改eureka个服务各自的主启动类
    6）修改其他服务提供者（这个案例是 部门服务提供者），修改他们注册进 eureka 集群的注册地址为 以上3个 eureka的服务注册地址
        eureka:
          client:   #eureka 的客户端配置
            service-url:
              #defaultZone: http://localhost:7001/eureka   # 指定eureka 的注册地址（单eureka版）
              defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka   # 指定eureka集群 的注册地址
    6）启动各个服务，查看每个eureka 服务是否关联着其他两个eureka 服务、每个eureka 服务是否注册了同一个 部门服务提供者
    自此：3个eureka 集群，1个服务提供者就成功了 。

9，
